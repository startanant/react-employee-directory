{"version":3,"sources":["Components/Header.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","style","height","backgroundImage","backgroundSize","backgroundPosition","Table","useState","employeeList","setEmployeeList","sort","setSort","myFilter","setFilter","useEffect","console","log","filter","filteredEmployeeList","employees","employee","name","toLowerCase","startsWith","loadEmployees","className","scope","onClick","sortedEmployeeList","a","b","id","sortById","type","value","placeholder","onChange","event","target","map","email","phone","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oyIAyBeA,MAvBf,WASI,OACI,6BACI,yBAAKC,MAAM,4BAA4BC,MAT5B,CACfC,OAAQ,OACRC,gBAAiB,yCACjBC,eAAgB,QAChBC,mBAAoB,WAMZ,yBAAKL,MAAM,oCACP,wBAAIA,MAAM,aAAV,sBACA,uBAAGA,MAAM,QAAT,8C,qBC8DLM,MA1Ef,WAAkB,IAAD,EAE6BC,mBAAU,IAFvC,mBAELC,EAFK,KAESC,EAFT,OAGaF,mBAAU,OAHvB,mBAGLG,EAHK,KAGCC,EAHD,OAIkBJ,mBAAU,IAJ5B,mBAILK,EAJK,KAIKC,EAJL,KAkDb,OA5CAC,qBACI,WACIC,QAAQC,IAAR,yCAA8CJ,EAA9C,MAKR,SAAwBK,GACpB,IAAIC,EAEAA,EADW,KAAXD,EACuBE,EAEAA,EAAUF,QAAQ,SAAAG,GAAQ,OAAKA,EAASC,KAAKC,cAAcC,WAAWN,MAEjGF,QAAQC,IAAIE,GACZT,EAAgB,YAAIS,IAZhBM,CAAeZ,KAChB,CAACA,IAyCJ,2BAAOa,UAAU,oBACb,+BACI,4BACI,wBAAIC,MAAM,MAAMC,QAAS,YA9BzC,SAAmBjB,GACf,IAAIkB,EACQ,QAATlB,GACCkB,EAAqBpB,EAAaE,MAAK,SAACmB,EAAGC,GAAJ,OAAWD,EAAEE,GAAKD,EAAEC,IAAO,EAAI,KACtEpB,EAAQ,UAERiB,EAAqBpB,EAAaE,MAAK,SAACmB,EAAGC,GAAJ,OAAWD,EAAEE,GAAKD,EAAEC,GAAM,GAAK,KACtEpB,EAAQ,QAEZF,EAAgB,YAAImB,IAqB+BI,CAAStB,KAAhD,OAA6D,uBAAGV,MAAM,iBACtE,wBAAI0B,MAAM,OAAM,2BAAOO,KAAK,OAAOC,MAAOtB,EAAUuB,YAAY,OAAOC,SAZvF,SAA2BC,GAEvB,IAAMH,EAAQG,EAAMC,OAAOJ,MAAMZ,cAEjCT,EAAUqB,OASE,wBAAIR,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGR,+BACKlB,EAAa+B,KAAK,SAAAnB,GAAQ,OAC3B,4BACI,wBAAIM,MAAM,OAAON,EAASW,IAC1B,4BAAKX,EAASC,MACd,4BAAKD,EAASoB,OACd,4BAAKpB,EAASqB,cCtDnBC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKjB,UAAU,aACf,kBAAC,EAAD,SCEckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.0e2a7921.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n\n    const aboutStyle = {\n        height: '50vh',\n        backgroundImage: 'url(\"https://i.imgur.com/NXskfGq.jpg\")',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center'\n    }\n\n    return (\n        <div>\n            <div class=\"jumbotron jumbotron-fluid\" style={aboutStyle}>\n                <div class=\"container text-center text-white\">\n                    <h1 class=\"display-4\">Employee Directory</h1>\n                    <p class=\"lead\">You can sort by ID and filter by name.</p>\n                </div>\n            </div>\n            \n        </div>\n    );\n\n}\n\nexport default Header;\n\n","import React, { useState, useEffect } from 'react';\nimport employees from '../employees.json';\n\n\nfunction Table() {\n\n    const [ employeeList, setEmployeeList ] = useState( [] );\n    const [ sort, setSort ] = useState( 'asc' );\n    const [ myFilter, setFilter] = useState( '' );\n\n    useEffect(\n        function() {\n            console.log(`[useEffect] was run for filter(${myFilter})`);\n            loadEmployees( myFilter );\n        }, [myFilter]\n    );\n\n    function loadEmployees( filter ) {\n        let filteredEmployeeList;\n        if (filter === '') {\n            filteredEmployeeList = employees;\n        } else {\n            filteredEmployeeList = employees.filter( employee =>  employee.name.toLowerCase().startsWith(filter) );\n        }\n        console.log(filteredEmployeeList);\n        setEmployeeList([...filteredEmployeeList]);\n    }\n    \n    function sortById( sort ) {\n        let sortedEmployeeList;\n        if(sort === 'asc') {\n            sortedEmployeeList = employeeList.sort((a, b) => (a.id > b.id) ? -1 : 1);\n            setSort('desc');\n        } else {\n            sortedEmployeeList = employeeList.sort((a, b) => (a.id > b.id) ? 1 : -1);\n            setSort('asc');\n        }\n        setEmployeeList([...sortedEmployeeList]);\n    }\n\n    // function filter(value) {\n    //     //alert(value);\n    //     let filteredEmployeeList = employeeList.filter(employee => { let emp_name = employee.name.toLowerCase(); console.log(emp_name); return emp_name.startsWith(value) });\n    //     console.log(filteredEmployeeList);\n    //     setEmployeeList([...filteredEmployeeList]);\n    // }\n\n    function handleInputChange(event) {\n        //alert(event.target.value);\n        const value = event.target.value.toLowerCase();\n        //filter(value);\n        setFilter(value);\n    }\n\n    return (\n        <table className=\"table table-dark\">\n            <thead>\n                <tr>\n                    <th scope=\"col\" onClick={function () { sortById(sort) }}> ID <i class=\"fas fa-sort\"></i></th>\n                    <th scope=\"col\"><input type=\"text\" value={myFilter} placeholder=\"Name\" onChange={handleInputChange}></input></th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">Phone</th>\n                </tr>\n            </thead>\n            <tbody>\n                {employeeList.map( employee => \n                <tr>\n                    <th scope=\"row\">{employee.id}</th>\n                    <td>{employee.name}</td>\n                    <td>{employee.email}</td>\n                    <td>{employee.phone}</td>\n                </tr>\n                )}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport Table from './Components/Table'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n      <Table />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}